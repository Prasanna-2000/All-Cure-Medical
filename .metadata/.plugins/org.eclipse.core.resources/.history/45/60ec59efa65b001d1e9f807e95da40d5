package com.project.AllCureMedical.controller;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.project.AllCureMedical.api.CustomerApi;
import com.project.AllCureMedical.api.OrderApi;
import com.project.AllCureMedical.api.ProductApi;
import com.project.AllCureMedical.api.UsersApi;
import com.project.AllCureMedical.bean.BillDTO;
import com.project.AllCureMedical.bean.CustomerDTO;
import com.project.AllCureMedical.bean.ProductsDTO;
import com.project.AllCureMedical.bean.SalesPersonDTO;
import com.project.AllCureMedical.bean.UsersDTO;
import com.project.AllCureMedical.bean.WholesaleOrderDTO;
import com.project.AllCureMedical.service.DemouserService;

@RequestMapping("ui")
@RestController
public class ClientControllerUi {
	@Autowired
	private ProductApi productApi;
	
	@Autowired
	private OrderApi orderApi;
	
	@Autowired
	private  DemouserService service;
	
	@Autowired 
	private UsersApi userApi;
	
	@Autowired
	private CustomerApi customerApi;
	
	String user;
	Long cnr;
	String sPid;
	
	 @GetMapping(value="/index")
	 public ModelAndView showIndexPage() {
		 String uri="";
		 System.out.println("in index");
		 user = service.getType();
		 System.out.println(user);
		 if(user.equalsIgnoreCase("Super")) {
			 user = "super";
			 uri="ui/home";
		 }
		 else if(user.equalsIgnoreCase("Ordinary")) {
			 user = "ordinary";
			 uri="ui/home";
			 cnr = Long.parseLong(service.getUsername());
		 }
		 else if(user.equalsIgnoreCase("Salesperson")) {
			 user = "salesperson";
			 uri="ui/home";
			 sPid = service.getUsername();
		 }
		 return new ModelAndView("redirect:/" + uri);
	 }
	
	@GetMapping("home")
	public ModelAndView showHomePage() {
		ModelAndView mv = new ModelAndView("home_template");
		List<ProductsDTO> productList = productApi.showAllProduct();
		if(user == "ordinary") {
			
			//logic to make order button disappear if order is pending
//			long cnr = 124568922;
			List<WholesaleOrderDTO> orderList = findOrderById(cnr); //accept by user
			Boolean allow = true;
			
			//RESEARCH NEEDED if list is sorted by time
//			WholesaleOrderDTO w = orderList.get(0);
//			if(w.getStatus().equalsIgnoreCase("pending"))
//				allow = false;
			
			for(WholesaleOrderDTO w: orderList) {
				if(w.getStatus().equalsIgnoreCase("pending"))
					allow = false;
			}
			
			mv.addObject("productList", productList);
			mv.addObject("user", user);
			mv.addObject("allow",allow);
	        return mv;
		}
		else if(user == "salesperson") {
			SalesPersonDTO spdto = orderApi.findSalesPersonById(sPid);
			Integer commissionExisting = spdto.getComission();
			
			Boolean allow = true;
			mv.addObject("productList", productList);
			mv.addObject("allow",allow);
			mv.addObject("commission", commissionExisting);
			mv.addObject("user", user);
	        return mv;
		}
		else {
			Boolean allow = true;
			mv.addObject("productList", productList);
			mv.addObject("allow",allow);
			mv.addObject("user", user);
			return mv;
		}
    }
	
	@GetMapping("cart")
	public ModelAndView showCartPage() {
		if(user == "ordinary") {
			ModelAndView mv = new ModelAndView("cart_template");
			
			//filter wOrder list by cnr
//			long cnr = 124568922;
			List<WholesaleOrderDTO> orderList = findOrderById(cnr); //accept by user
//			List<WholesaleOrderDTO> orderList = orderApi.showAllWBills(); //accept by user
			
			mv.addObject("orderList", orderList);
			mv.addObject("user", user);
	        return mv;
		}
		else if(user == "salesperson") {
			ModelAndView mv = new ModelAndView("sp_cart_template");
			
			List<BillDTO> orderList = findOrderByIdSp(sPid); //accept by user
			
			mv.addObject("rOrderList", orderList);
			mv.addObject("user", user);
	        return mv;
		}
		else {
			List<WholesaleOrderDTO> wholesaleList = orderApi.showAllWBills();
			List<BillDTO> rsaleList = orderApi.showAllRBills();
			ModelAndView mv = new ModelAndView("cart_template");
			mv.addObject("orderList", wholesaleList); ////CHANGE NEEDED
			mv.addObject("orderListR", rsaleList);
			mv.addObject("user", user);
			return mv;
		}
	}
	
	@PostMapping("viewProduct") //add items to cart
	public ModelAndView viewPro(@RequestParam("radio") List<String> idList, @RequestParam("stock_deduce") List<Integer> stockList, @RequestParam("customerName") String name) {
		if(user == "ordinary" || user == "super") {
			for(int i=0; i<stockList.size(); i++) {
				if(stockList.get(i) == 0)
					stockList.remove(i);
			}
			
			List<ProductsDTO> orderList = new ArrayList<>();
			Iterator<String> idIterator = idList.iterator();
			Iterator<Integer> stockIterator = stockList.iterator();
			
			System.out.println(stockList + " " + idList);
			
			while(idIterator.hasNext() && stockIterator.hasNext()) {
				String idNext = idIterator.next();
				Integer stockNext = stockIterator.next();
				
				ProductsDTO pdto = productApi.showAProduct(idNext);
				
				WholesaleOrderDTO wdto = new WholesaleOrderDTO();
				wdto.setCnr(cnr); //accept from user
				wdto.setProductId(pdto.getProductId());
				wdto.setRate(pdto.getWholesaleRate());
				
				System.out.println(stockNext);
				wdto.setQuantity(stockNext);
				orderApi.saveWBill(wdto);
				
				pdto.setStock(pdto.getStock() - stockNext);
				productApi.editAProduct(pdto);
				orderList.add(pdto);
			}
			System.out.println(orderList);
			return new ModelAndView("redirect:/ui/cart");
		}
		
		else if(user == "salesperson" || user == "super") {
			ModelAndView mv = new ModelAndView("payment_template");
			for(int i=0; i<stockList.size(); i++) {
				if(stockList.get(i) == 0)
					stockList.remove(i);
			}
			
			List<BillDTO> orderList = new ArrayList<>();
			Iterator<String> idIterator = idList.iterator();
			Iterator<Integer> stockIterator = stockList.iterator();
			
			System.out.println(stockList + " " + idList);
			
			Integer tempTotal = 0;
			while(idIterator.hasNext() && stockIterator.hasNext()) {
				String idNext = idIterator.next();
				Integer stockNext = stockIterator.next();
				
				ProductsDTO pdto = productApi.showAProduct(idNext);
				
				BillDTO bdto = new BillDTO();
				bdto.setProductId(pdto.getProductId());
				bdto.setRate(pdto.getRetailRate());
				bdto.setAmount(pdto.getRetailRate()*stockNext);
				bdto.setName(name);
				bdto.setSalespersonId(sPid);
				
				tempTotal = pdto.getRetailRate()*stockNext;
				
				System.out.println(stockNext);
				bdto.setQuantity(stockNext);
				orderApi.saveRBill(bdto);
				
				pdto.setStock(pdto.getStock() - stockNext);
				productApi.editAProduct(pdto);
				orderList.add(bdto);
			}
			System.out.println(orderList);
			Integer total = 0;
			for(BillDTO bdto: orderList) {
				total += bdto.getAmount();
			}

			//scam bill retrive
			BillDTO tempbdto = orderList.get(0);
			List<BillDTO> tempList = orderApi.showAllRBills();
			for(BillDTO b: tempList) {
				if(b.getAmount() == tempTotal);
					tempbdto = b;
			}
			String date = tempbdto.getBookingDate();
			Long orderNo = tempbdto.getBillNo();
			
			System.out.println(tempbdto);
			System.out.println(date + " " + orderNo);
				
//			commission updation
			Double commission = 0.0;
			if(total >= 2500)
				commission = total * 0.05;
			SalesPersonDTO spdto = orderApi.findSalesPersonById(sPid);
			Integer commissionExisting = spdto.getComission();
			commission += commissionExisting;
			String str=String.format("%.2f",commission);
	        String c=str.substring(0, str.length()-3);
			
			spdto.setComission(Integer.parseInt(c));
			orderApi.editComission(spdto);
			
			mv.addObject("cartItemList", orderList);
			mv.addObject("total", total);
			mv.addObject("date", date);
			mv.addObject("orderNo", orderNo);
			mv.addObject("name", name);
			mv.addObject("user", user);
			return mv;
		}
		
		else {
			ModelAndView mv = new ModelAndView("redirect:/ui/home");
			mv.addObject("user", user);
			return mv;
		}
	}
	
	@PostMapping("invoice")
	public ModelAndView showInvoicePage() {
		ModelAndView mv = new ModelAndView("payment_template");
		if(user == "ordinary") {
			List<WholesaleOrderDTO> cartItemList = orderApi.findPendingWByCnr(cnr); //accept from user
			
			Integer total = 0;
			for(WholesaleOrderDTO wdto: cartItemList) {
				total += wdto.getAmount();
			}
			
			WholesaleOrderDTO tempwdto = cartItemList.get(0);
			Long orderNo = tempwdto.getOrderNo();
			String date = tempwdto.getBookingDate();
			
			Integer discount = (total/100)*5;
			
			mv.addObject("cartItemList", cartItemList);
			mv.addObject("orderNo", orderNo);
			mv.addObject("date", date);
			mv.addObject("total", total-discount);
			mv.addObject("discount", discount);
			return mv;
		}
		return mv;
	}
	
	//set status of wOrder when paid the bill
	@PostMapping("paid")
	public ModelAndView setStatus() {
		if(user == "ordinary") {
	//		long cnr = 124568922;
			List<WholesaleOrderDTO> orderList = findOrderById(cnr); //accept by user
			for(WholesaleOrderDTO w: orderList) {
				w.setStatus("clear");
				orderApi.editWBill(w);
			}
			return new ModelAndView("redirect:/ui/cart");
		}
		else if(user == "salesperson"){
//			long cnr = 124568922;
//				List<WholesaleOrderDTO> orderList = findOrderById(cnr); //accept by user
//				for(WholesaleOrderDTO w: orderList) {
//					w.setStatus("clear");
//					orderApi.editWBill(w);
//				}
				return new ModelAndView("redirect:/ui/spCart");
		}
		else {
			return new ModelAndView("redirect:/ui/home");
		}
	}
	
//	----------------------Admin panel-------------------------
	
	@GetMapping("product")
	public ModelAndView showProductPage() {
		ModelAndView mv = new ModelAndView("products_template");
		List<ProductsDTO> productList = productApi.showAllProduct();
		mv.addObject("productList", productList);
		mv.addObject("user", user);
        return mv;
    }
	
	@GetMapping("deleteProduct/{id}")
	public ModelAndView deleteProduct(@PathVariable String id) {
		productApi.deleteProduct(id);
		return new ModelAndView("redirect:/ui/product");
	}
	
	@GetMapping("editProduct/{id}")
	public ModelAndView showEditPage(@PathVariable String id) {
		ProductsDTO pDTO = productApi.showAProduct(id);
		ModelAndView mv = new ModelAndView("product_update_page");
		mv.addObject("product",pDTO);
		return mv;
	}
	
	@PostMapping("editProduct/edit")
	public ModelAndView editProduct(ProductsDTO productDTO) {
		System.out.println(productDTO);
		productApi.editAProduct(productDTO);
		return new ModelAndView("redirect:/ui/product");
	}
	
	@GetMapping("/addProduct")
	public ModelAndView showProductEntry() {
		ProductsDTO productDTO = new ProductsDTO();
		ModelAndView mv = new ModelAndView("product_entry_page");
		mv.addObject("productRecord",productDTO);
		return mv;
	}
	
	@PostMapping("/addProduct")
	public ModelAndView saveNewProduct(@ModelAttribute(value="productRecord") ProductsDTO productDTO) {
		productApi.saveAProducts(productDTO);
		return new ModelAndView("redirect:/ui/product");
	}
	
	@GetMapping("/orders")
	public ModelAndView showOrdersPage() {
		ModelAndView mv = new ModelAndView("orders_template");
		List<WholesaleOrderDTO> orderList = orderApi.showAllWBills();
		List<BillDTO> billList = orderApi.showAllRBills();
		mv.addObject("orderList", orderList);
		mv.addObject("billList",billList);
		mv.addObject("user", user);
        return mv;
	}
	
	@GetMapping("users")
	public ModelAndView showUsersPage() {
		ModelAndView mv = new ModelAndView("users_template");
		List<UsersDTO> userList = userApi.findAllUsers();
		List<CustomerDTO> customerList = customerApi.findAll();
		mv.addObject("userList", userList);
		mv.addObject("customerList", customerList);
		mv.addObject("user", user);
        return mv;
    }
	
	@GetMapping("addSuperCustomer")
	public ModelAndView register1() {
		UsersDTO users=new UsersDTO();
	    ModelAndView mv=new  ModelAndView("superRegister");
	    mv.addObject("userRecord",users);
		return mv;
	}
	
	@GetMapping("addSalesperson")
	public ModelAndView register2() {
		return new ModelAndView("salesPersonRegister");
	}
	
	@GetMapping("addOrdinaryUser")
	public ModelAndView register3() {
		return new ModelAndView("ordinaryRegister");
	}
	
//	--------------------------Admin panel end-------------------------
	
	@GetMapping("spCart")
	public ModelAndView showSpCartPage() {
		SalesPersonDTO spdto = orderApi.findSalesPersonById(sPid);
		System.out.println(spdto);
		Integer commissionExisting = spdto.getComission();
		
		ModelAndView mv = new ModelAndView("sp_cart_template");
		List<BillDTO> rOrderList = findOrderByIdSp(sPid);
		mv.addObject("rOrderList", rOrderList);
		mv.addObject("commission", commissionExisting);
		mv.addObject("user", user);
        return mv;
	}
	
//	----------------------------------------------------
	
	//filter wOrder by cnr
	public List<WholesaleOrderDTO> findOrderById(long cnr){
		List<WholesaleOrderDTO> resList = new ArrayList<>();
		List<WholesaleOrderDTO> wdtoList = orderApi.showAllWBills();
		for(WholesaleOrderDTO w: wdtoList) {
			if(w.getCnr() == cnr)
				resList.add(w);
		}
		return resList;
	}
	
	public List<BillDTO> findOrderByIdSp(String s){
		List<BillDTO> resList = new ArrayList<>();
		List<BillDTO> bdtoList = orderApi.showAllRBills();
		for(BillDTO b: bdtoList) {
			if(b.getSalespersonId().equalsIgnoreCase(s))
				resList.add(b);
		}
		System.out.println(resList.size());
		return resList;
	}
}
